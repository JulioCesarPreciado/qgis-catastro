# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'clave.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from qgis.PyQt.QtWidgets import *
from .funcBaseDatos import fnConexionServidor, fnConexionCerrar, fnConexionServidorPg, fnConexionCerrarPg
from qgis.core import QgsRasterLayer, QgsProject,QgsDataSourceUri
from qgis.core import Qgis
from qgis.core import *
import psycopg2
import sys
global Catastral
global clv_mzn
clv_mzn=""
Catastral=""

def datosClv(self):  # def datosClv(self):
        #global  Catastral
        Catastral = str(self.mLineEdit.text())
        clv_mzn = (str(self.mLineEdit.text())[5:9])
        return Catastral, clv_mzn
        #Catastral, clv_mzn


class Ui_clv_Cat(object):
    def setupUi(self, Dialog,clv_catastral,clv_gestion):

        def cmd_GenerarClaveC_Click():

            try:
                con = fnConexionServidorPg()
                #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                cur = con.cursor()
                cur.execute("select b.clv_mzn  from nogales_catastro.predios a, nogales_catastro.manzanas b where st_intersects(b.geom, a.geom) = true and a.catastral='" + clv_catastral + "' ")
                
                for x in cur.fetchall():
                        #global clv_mzn
                        print("convertir a texto")
                        print(x)
                        mzn=str(x)
                        clv_mzn=mzn[2:-3]
                        print(clv_mzn)
                
                
                
                
                #self.mLineEdit.setText(clv_mzn)
                con.commit()
                #print ('Tabla creada')
            except psycopg2.DatabaseError as e:
                print(f'Error {e}')
            cur.close()
            fnConexionCerrarPg(con)
           
            print(clv_catastral)
            max_catastral="%"+clv_catastral+"%"
            #obtener valor maximo carastral de geometria
            try:
                con = fnConexionServidorPg()
                #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                cur = con.cursor()
                cur.execute("select  nogales_catastro.ValorMaximoCarto ("+clv_gestion+",'"+max_catastral+"')")
                for row in cur.fetchall():
                    print(row[0])
                    
                    max_catastral=row[0]
                con.commit()
                fnConexionCerrarPg(con)
            except psycopg2.DatabaseError as e:
                    print(f'Error {e}')
            
            # obtener sector
            try:
                print("cATASTRAL = ",clv_catastral)
                con = fnConexionServidor()
                cur = con.cursor()
                cur.execute("select sector from catastro where catastral='" + clv_catastral + "' ")
                    
                        
                for x in cur.fetchall():
                                
                        print("convertir a texto")
                        print(x[2:-4])
                        sector=str(x)
                        tipo_Sector=sector[2:-4]
                        print("Sector:",tipo_Sector)


                print(tipo_Sector)
                con.commit()    
            except:
                print("Error SECTOR")
        
            cur.close()
            fnConexionCerrar(con)

            # generar clave catastral
            try:
                con = fnConexionServidor()
                cur = con.cursor()
                print("manzana: ",clv_mzn)
                print("gestion: ",clv_gestion)
                mzn="53000"+clv_mzn
                print("max catastral: ",max_catastral)
                print("declare @ncatastral as char(16) exec calculaclavecatastralver2 "+max_catastral+",'"+ mzn +"','"+ clv_gestion +"',@ncatastral output select @ncatastral")
                
                #declare @ncatastral as char(16) exec calculaclavecatastralver2 100,'530001003',116,@ncatastral output select @ncatastral
                cur.execute("declare @ncatastral as char(16) exec calculaclavecatastralver2 "+max_catastral+",'"+ mzn +"','"+ clv_gestion +"',@ncatastral output select @ncatastral")
                #cur.execute("declare @ncatastral as char(16) exec calculaclavecatastralver2 100,'530001003',116,@ncatastral output select @ncatastral")
                for row in cur.fetchall():
                    sp_cat=row[0].split()
                    claveC=str(sp_cat[0])
                    print("claveC: ",claveC)

                print("Sector en clave:",tipo_Sector)
                print(mzn)
                #global Catastral
                if tipo_Sector=="U":
                    NumCar = len(claveC)
                    print(NumCar)
                    if NumCar==1:
                        Catastral = mzn+"00"+claveC
                    elif NumCar==2:
                            Catastral = mzn+"0"+claveC
                    else:
                        Catastral = mzn+claveC
                    print("Nueva Catastral**: ",Catastral)
                    self.mLineEdit.setText(str(Catastral))
                    return  Catastral, clv_mzn
                    
                elif tipo_Sector=="R":
                    MaximoRustico = MaximoRustico + 1
                    NumCar = len(MaximoRustico)
                    if NumCar == 1:
                            Catastral = mzn+"00"+str(MaximoRustico)
                    elif NumCar == 2:
                                Catastral = mzn+"0"+str(MaximoRustico)
                    else:
                         Catastral = mzn+str(MaximoRustico)
                         
                cur.close()
                fnConexionCerrar(con)
                
            except:
                
                print("Error genera")



        Dialog.setObjectName("Dialog")
        Dialog.resize(394, 143)
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(30, 100, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.mLineEdit = QgsFilterLineEdit(Dialog)
        self.mLineEdit.setGeometry(QtCore.QRect(50, 40, 181, 27))
        self.mLineEdit.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.mLineEdit.setAcceptDrops(False)
        self.mLineEdit.setReadOnly(True)
        self.mLineEdit.setProperty("qgisRelation", "")
        self.mLineEdit.setObjectName("mLineEdit")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(50, 20, 131, 16))
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(250, 40, 101, 31))
        self.pushButton.setObjectName("pushButton")

        
        self.pushButton.clicked.connect(cmd_GenerarClaveC_Click)
        self.retranslateUi(Dialog)
        self.buttonBox.accepted.connect(Dialog.accept)
        self.buttonBox.rejected.connect(Dialog.reject)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Generar Clave Catastral"))
        self.label.setText(_translate("Dialog", "Nueva Clave Catastral"))
        self.pushButton.setText(_translate("Dialog", "Generar Clave"))
from qgsfilterlineedit import QgsFilterLineEdit


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_clv_Cat()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
