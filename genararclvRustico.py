# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'clave.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from qgis.PyQt.QtWidgets import *
from .funcBaseDatos import fnConexionServidor, fnConexionCerrar, fnConexionServidorPg, fnConexionCerrarPg
from qgis.core import QgsRasterLayer, QgsProject,QgsDataSourceUri
from qgis.core import Qgis
from qgis.core import *
import psycopg2
import sys
clv_mzn=""
Catastral=""
validaClv= 0

def datosClv(self):
        global  Catastral, validaClv
        if validaClv ==1:
            Catastral = self.mLineEdit.text()
            categoria=str(self.comboBox.currentText())
            print(Catastral)
            return  Catastral, categoria
        else:
            return 0



class Ui_clv_CatR(object):
    def setupUi(self, Dialog,clv_catastral,clv_gestion):

        def cmd_GenerarClaveC_Click():
            global validaClv
            validaClv=0
            clv_ban=0
            clvText=self.mLineEdit.text()
            clvsplit=clvText[0:4]
            print(clvsplit)
            if (len(clvText)==12 and clvsplit=='5300'):
                if clv_catastral==clvText:
                    validaClv= 1
                    self.label2.setText("    clave Original")
                    self.label2.setStyleSheet('background-color: lightgreen')
                else:
                     
                    try:
                        con = fnConexionServidorPg()
                        cur = con.cursor()
                        cur.execute("select catastral from nogales_catastro.predios where catastral='" + clvText + "' ")
                        print("postgres")
                        if cur.fetchone():
                            print("clave existente")
                            self.label2.setText("    La clave ya Existe")
                            self.label2.setStyleSheet('background-color: darksalmon')
                        else:
                            
                            try: 
                                conSql = fnConexionServidor()
                                curSql = conSql.cursor()
                                curSql.execute("select catastral from catastro where catastral='" + clvText + "' ")
                                print("sql")
                                print(curSql.rowcount)        
                                if curSql.rowcount != 0:
                                    validaClv= 0
                                    self.label2.setText("  La clave ya Existe")
                                    self.label2.setStyleSheet('background-color: darksalmon')

                                    
                                else:
                                    validaClv= 1
                                    
                                    self.label2.setText("  Se ha validado correctamente")
                                    self.label2.setStyleSheet('background-color: lightgreen')
                                conSql.commit()    
                            except:
                                print("Error clv catastral")
                        
                            curSql.close()
                            fnConexionCerrar(conSql)
                        
                        
                        
                        con.commit()
                        
                    except psycopg2.DatabaseError as e:
                        print(f'Error {e}')
                    cur.close()
                    fnConexionCerrarPg(con)
                    print(validaClv)
                if validaClv == 1:
                            
                        try:                
                            con = fnConexionServidor()
                            cur = con.cursor()
                            ###
                            ids_categoria = []
                            cur.execute( "SELECT categoria FROM c_valores_rusticos WHERE (vigencia = 'V') ORDER BY id_valores_rusticos" )
                            for categoria in cur.fetchall() :
                                    datos_categoria = categoria[0]
                                    #print(datos_matriz)
                                    ids_categoria.append(datos_categoria)
                            #ids_categoria.sort()
                            self.comboBox.addItems(ids_categoria)
                            # This connects the function to the layer combobox when changed    
                            #self.comboBox.currentIndexChanged.connect(field_select)
                            ###

                            con.commit()    
                        except:
                            print("Error llenar combobox")
                        
                        cur.close()
                        fnConexionCerrar(con)
            else:
                self.label2.setText("  clave no válida")
                self.label2.setStyleSheet('background-color: darksalmon')        


            


        Dialog.setObjectName("Dialog")
        Dialog.resize(394, 190)
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(30, 120, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.mLineEdit = QgsFilterLineEdit(Dialog)
        self.mLineEdit.setGeometry(QtCore.QRect(50, 40, 181, 27))
        self.mLineEdit.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.mLineEdit.setAcceptDrops(False)
        #self.mLineEdit.setReadOnly(True)
        self.mLineEdit.setProperty("qgisRelation", "")
        self.mLineEdit.setObjectName("mLineEdit")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(50, 20, 131, 16))
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(250, 40, 101, 31))
        self.pushButton.setObjectName("pushButton")
        self.label2 = QtWidgets.QLabel(Dialog)
        self.label2.setGeometry(QtCore.QRect(50, 67, 181, 20))
        self.label2.setObjectName("label2")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(50, 90, 211, 16))
        self.label_3.setObjectName("label_3")
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setGeometry(QtCore.QRect(110, 90, 231, 22))
        self.comboBox.setObjectName("comboBox")

        
        self.pushButton.clicked.connect(cmd_GenerarClaveC_Click)
        self.retranslateUi(Dialog)
        self.buttonBox.accepted.connect(Dialog.accept)
        self.buttonBox.rejected.connect(Dialog.reject)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Predios Rusticos"))
        self.label.setText(_translate("Dialog", " Clave Catastral"))
        self.label_3.setText(_translate("Dialog", "Categoría"))
        self.pushButton.setText(_translate("Dialog", "Validar Clave"))
from qgsfilterlineedit import QgsFilterLineEdit


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_clv_CatR()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
