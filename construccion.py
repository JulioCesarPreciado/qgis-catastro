# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'construccion.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from qgis.PyQt.QtWidgets import *
from .funcBaseDatos import fnConexionServidor, fnConexionCerrar, fnConexionServidorPg, fnConexionCerrarPg
from qgis.core import QgsRasterLayer, QgsProject,QgsDataSourceUri
from qgis.core import Qgis
from qgis.core import *
import psycopg2
tipo_Sector=""
clv_mzn=""
clv_gestion=""
clv_catastral=""
bloque_max=0
matrizd=""
tipologia_construccion="" 
valor_construccion=0 
id_vuc=0

def valores_cat(self):
    global bloque_max, matrizd, tipologia_construccion, valor_construccion, id_vuc
    nivel=self.mLineEdit_2.text()
    return bloque_max, matrizd, tipologia_construccion, valor_construccion, id_vuc,nivel

########## llenar datos si existen
def llenadatosConst(self,matrizf,bloquef,nivelf):

                    gConnMySql = fnConexionServidor()         
                    cur = gConnMySql.cursor()
                    #elf.mLineEdit.setText(str(bloquef))
                    self.mLineEdit_2.setText(str(nivelf))
                   
                    cur.execute( "SELECT matriz, tipologia_construccion, valor_construccion,id_vuc FROM c_vuc WHERE (vigencia = 'v' AND matriz='"+matrizf+"') ORDER BY matriz" )
                    for matriz in cur.fetchall() :
                        
                        self.mLineEdit_3.setText(str(matriz[0]))
                        self.mLineEdit_4.setText(str(matriz[2]))
                        self.mLineEdit_5.setText(str(matriz[3]))
                        self.mLineEdit_6.setText(str(matriz[1]))
                        matrizd=matriz[0] 
                        tipologia_construccion=matriz[1] 
                        valor_construccion=matriz[2]
                        id_vuc=matriz[3]

                    cur.close()
                    fnConexionCerrar(gConnMySql)
                    
                    







######### datos select
def cargaDatos(self):
    # Set Rs_Valores = conexion.Execute("SELECT     matriz, tipologia_construccion, valor_construccion,id_vuc FROM c_vuc WHERE     (vigencia = 'v') ORDER BY matriz")
            def field_select():
                    cur = gConnMySql.cursor()
                    global matrizd, tipologia_construccion, valor_construccion, id_vuc

                    sel = str(self.comboBox.currentText())
                    print(sel)
                    matriz=str(sel[8:13])
                    print(len(matriz))
                    
                    cur.execute( "SELECT matriz, tipologia_construccion, valor_construccion,id_vuc FROM c_vuc WHERE (vigencia = 'v' AND matriz='"+matriz+"') ORDER BY matriz" )
                    for matriz in cur.fetchall() :
                        
                        self.mLineEdit_3.setText(str(matriz[0]))
                        self.mLineEdit_4.setText(str(matriz[2]))
                        self.mLineEdit_5.setText(str(matriz[3]))
                        self.mLineEdit_6.setText(str(matriz[1]))
                        matrizd=matriz[0] 
                        tipologia_construccion=matriz[1] 
                        valor_construccion=matriz[2]
                        id_vuc=matriz[3]

                    cur.close()
            
            gConnMySql = fnConexionServidor()
            if (gConnMySql):
                print("conecta")
                cur = gConnMySql.cursor()
                ids_matriz = []
                cur.execute( "SELECT matriz, tipologia_construccion FROM c_vuc WHERE     (vigencia = 'v') ORDER BY matriz" )
                for matriz in cur.fetchall() :
                    datos_matriz = "Matriz: "+matriz[0]+" Topologia :"+matriz[1]
                    #print(datos_matriz)
                    ids_matriz.append(datos_matriz)
                ids_matriz.sort()
                self.comboBox.addItems(ids_matriz)
                cur.close()

            # This connects the function to the layer combobox when changed
            
            self.comboBox.currentIndexChanged.connect(field_select)

            

class Ui_construcciones(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(408, 209)
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(290, 20, 81, 71))
        self.buttonBox.setOrientation(QtCore.Qt.Vertical)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(20, 30, 31, 16))
        self.label_2.setObjectName("label")
        #self.label_2 = QtWidgets.QLabel(Dialog)
        #self.label_2.setGeometry(QtCore.QRect(130, 30, 31, 16))
        #self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(20, 70, 211, 16))
        self.label_3.setObjectName("label_3")
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setGeometry(QtCore.QRect(170, 70, 191, 22))
        self.comboBox.setObjectName("comboBox")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(20, 160, 161, 16))
        self.label_4.setObjectName("label_4")
        self.mLineEdit_2 = QgsFilterLineEdit(Dialog)
        self.mLineEdit_2.setGeometry(QtCore.QRect(60, 26, 60, 21))
        self.mLineEdit_2.setProperty("qgisRelation", "")
        self.mLineEdit_2.setObjectName("mLineEdit")
        self.mLineEdit_2.setAcceptDrops(False)
        self.mLineEdit_2.setReadOnly(False)
        # self.mLineEdit_2 = QgsFilterLineEdit(Dialog)
        # self.mLineEdit_2.setGeometry(QtCore.QRect(160, 26, 60, 21))
        # self.mLineEdit_2.setProperty("qgisRelation", "")
        # self.mLineEdit_2.setObjectName("mLineEdit_2")
        # self.mLineEdit_2.setAcceptDrops(False)
        # self.mLineEdit_2.setReadOnly(True)
        self.mLineEdit_3 = QgsFilterLineEdit(Dialog)
        self.mLineEdit_3.setGeometry(QtCore.QRect(70, 100, 71, 21))
        self.mLineEdit_3.setProperty("qgisRelation", "")
        self.mLineEdit_3.setObjectName("mLineEdit_3")
        self.mLineEdit_3.setAcceptDrops(False)
        self.mLineEdit_3.setReadOnly(True)
        self.mLineEdit_4 = QgsFilterLineEdit(Dialog)
        self.mLineEdit_4.setGeometry(QtCore.QRect(190, 100, 71, 21))
        self.mLineEdit_4.setProperty("qgisRelation", "")
        self.mLineEdit_4.setObjectName("mLineEdit_4")
        self.mLineEdit_4.setAcceptDrops(False)
        self.mLineEdit_4.setReadOnly(True)
        self.mLineEdit_5 = QgsFilterLineEdit(Dialog)
        self.mLineEdit_5.setGeometry(QtCore.QRect(300, 100, 71, 21))
        self.mLineEdit_5.setProperty("qgisRelation", "")
        self.mLineEdit_5.setObjectName("mLineEdit_5")
        self.mLineEdit_5.setAcceptDrops(False)
        self.mLineEdit_5.setReadOnly(True)
        self.mLineEdit_6 = QgsFilterLineEdit(Dialog)
        self.mLineEdit_6.setGeometry(QtCore.QRect(20, 130, 231, 21))
        self.mLineEdit_6.setProperty("qgisRelation", "")
        self.mLineEdit_6.setObjectName("mLineEdit_6")
        self.mLineEdit_6.setAcceptDrops(False)
        self.mLineEdit_6.setReadOnly(True)
        self.mLineEdit_7 = QgsFilterLineEdit(Dialog)
        self.mLineEdit_7.setGeometry(QtCore.QRect(180, 160, 161, 21))
        self.mLineEdit_7.setProperty("qgisRelation", "")
        self.mLineEdit_7.setObjectName("mLineEdit_7")
        self.mLineEdit_7.setAcceptDrops(False)
        self.mLineEdit_7.setReadOnly(True)

        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(20, 100, 41, 16))
        self.label_5.setObjectName("label_5")

        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(150, 100, 31, 16))
        self.label_6.setObjectName("label_6")

        self.label_7 =  QtWidgets.QLabel(Dialog)
        self.label_7.setGeometry(QtCore.QRect(270, 100, 21, 16))
        self.label_7.setObjectName("label_7")


        self.retranslateUi(Dialog)
        self.buttonBox.accepted.connect(Dialog.accept)
        self.buttonBox.rejected.connect(Dialog.reject)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Actualiza Datos de Construcción"))
        #self.label.setText(_translate("Dialog", "Bloque"))
        self.label_2.setText(_translate("Dialog", "Nivel"))
        self.label_3.setText(_translate("Dialog", "Valor Unitario de Construcción"))
        self.label_4.setText(_translate("Dialog", "Clave Catastral"))
        self.label_5.setText(_translate("Dialog", "Matriz"))
        self.label_6.setText(_translate("Dialog", "Valor"))
        self.label_7.setText(_translate("Dialog", "ID"))

from qgsfilterlineedit import QgsFilterLineEdit

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_construcciones()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
