 # -*- coding: utf-8 -*-
"""
/***************************************************************************
 LoginMaster
                                 A QGIS plugin
 Login
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-06-10
        git sha              : $Format:%H$
        copyright            : (C) 2020 by pgm
        email                : julio.preciado@perspective.com.mx
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt import QtWidgets, QtGui
from qgis.PyQt.QtGui import QIcon, QCursor, QColor
from qgis.PyQt.QtCore import *
 
from qgis.PyQt.QtWidgets import QAction, QCompleter, QApplication, QToolButton, QMenu

from qgis.core import Qgis
from qgis.core import QgsRasterLayer, QgsProject
from qgis.utils import iface
from qgis.gui import QgsMapToolIdentifyFeature, QgsMapCanvas, QgsMapCanvasItem, QgsMapTool, QgsMapToolIdentify
from qgis.core import *
from PyQt5.QtGui import QPixmap
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .login_master_dialog import LoginMasterDialog
from .dialogbuscar import BuscarDialog
from .funcBaseDatos import fnConexionServidor, fnConexionCerrar, fnConexionServidorPg, fnConexionCerrarPg
from .consulta import DialogTramite
from .avaluo import Ui_Dialog
from .catysal import Ui_Catysal, llenadatos
from .guardar import Ui_Guardar,  datosPredios, valores
from .construccion import Ui_construcciones, cargaDatos, valores_cat, llenadatosConst
from .genararclv import Ui_clv_Cat, datosClv
from .genararclvRustico import Ui_clv_CatR, datosClv
from .fusion import fusionDialog


#from .funcBaseDatos import *
import subprocess
from subprocess import *
import os
import os.path
#import pymysql
import psycopg2
import sys
import requests
clv_catastral=""
clv_manzana=""       
clv_gestion=""
unidades=0
selTramite=""
selectedLayer=0
predios_sel=False
costrucciones_sel=False  
ban_pred=False 
ban_const=False     
usuario=""
clv_gid=""
xy_catastral=""
clv_gid_predio=""
xy_catastral_ptrdio=""
clv_catastral_predio=""
ventanaD=None
ventanapredios=None
ventanaReg=None
ventanaTramite=None
ventanaBuscar=None
ventanaClave=None
ventanaRustico=None
ventanaFusion=None


class LoginMaster:
    """QGIS Plugin Implementation."""
    
     
    
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LoginMaster_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Login Master')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    
        
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        
        
        return QCoreApplication.translate('LoginMaster', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
       
        
        
        icon = QIcon(icon_path)
        action = QAction(text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
 
        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return  
    
    
    
    
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        
        
        self.add_action(
            icon_path = ':/login_master/ic.png',
            text=self.tr(u'Registo'),
            callback=self.logins,
            enabled_flag=True,
            parent=self.iface.mainWindow())

        # will be set False in run()
        #self.first_start = True
        # will be set False in run()
        self.first_start = True
        
        # Busqueda
        
        self.actionBusqueda = QtWidgets.QAction(self.iface.mainWindow())
        
        self.actionBusqueda.setObjectName("actionBusqueda")
        self.actionBusqueda.triggered.connect(self.buscar)
        self.iface.addToolBarIcon(self.actionBusqueda)
        self.actionBusqueda.setText(self.tr(u'Búsqueda'))
        self.actionBusqueda.setEnabled(False)
        self.first_start2 = True
        self.actions.append(self.actionBusqueda)
        # Tramites
        
        self.actionTramites = QtWidgets.QAction(self.iface.mainWindow())
        
        self.actionTramites.setObjectName("actionTramites")
        self.actionTramites.triggered.connect(self.tramites)
        self.iface.addToolBarIcon(self.actionTramites)
        self.actionTramites.setText(self.tr(u'Trámites'))
        self.actionTramites.setEnabled(False) 
        self.first_start3 = True
        toolbar = iface.addToolBar("My ToolBar")
        self.actions.append(self.actionTramites)

        # Add QGIS action from iface
        toolbar.addAction(iface.actionIdentify())

        # Valor Unitario Vunitario
        
        self.actionVunitario = QtWidgets.QAction(self.iface.mainWindow())
        

        #icon = QtGui.QIcon(os.path.join(os.path.dirname(__file__), "clickcatysal.png"))
        #self.actionVunitario.setIcon(icon)
        self.actionVunitario.setObjectName("actionVunitario")
        self.actionVunitario.triggered.connect(self.prediosxy)
        self.iface.addToolBarIcon(self.actionVunitario)
        self.actionVunitario.setText(self.tr(u'Valor Unitario'))
        
        self.actionVunitario.setEnabled(False)
        self.actions.append(self.actionVunitario)



        # Valor identificar
        
        self.actionIdentificar = QtWidgets.QAction(self.iface.mainWindow())
        #iconid = QtGui.QIcon(os.path.join(os.path.dirname(__file__), "clickpredio.png"))
        #self.actionIdentificar.setIcon(iconid)        
        
        self.actionIdentificar.setObjectName("actionIdentificar")
        self.actionIdentificar.triggered.connect(self.catysal)
        
        self.iface.addToolBarIcon(self.actionIdentificar)
        self.actionIdentificar.setText(self.tr(u'Información  Catastral y Saldos'))
        self.actionIdentificar.setEnabled(False)
        self.actions.append(self.actionIdentificar)
        # construcciones
        
        self.actionbtnconstrucciones = QtWidgets.QAction(self.iface.mainWindow())
        #iconconst = QtGui.QIcon(os.path.join(os.path.dirname(__file__), "clickconst.png"))
        #self.actionbtnconstrucciones.setIcon(iconconst)
        
        self.actionbtnconstrucciones.setObjectName("actionbtnconstrucciones")
        self.actionbtnconstrucciones.triggered.connect(self.construccionesxy)
        
        self.iface.addToolBarIcon(self.actionbtnconstrucciones)
        self.actionbtnconstrucciones.setText(self.tr(u'Construcciones'))
        self.actionbtnconstrucciones.setEnabled(False)
        self.actions.append(self.actionbtnconstrucciones)
        
        #
        # generador de clave catastral
        
        self.actionGeneraclv = QtWidgets.QAction(self.iface.mainWindow())
        #iconconst = QtGui.QIcon(os.path.join(os.path.dirname(__file__), "clickconst.png"))
        #self.actionbtnconstrucciones.setIcon(iconconst)
        
        self.actionGeneraclv.setObjectName("actionGeneraclv")
        self.actionGeneraclv.triggered.connect(self.generaClvcat)
        
        self.iface.addToolBarIcon(self.actionGeneraclv)
        self.actionGeneraclv.setText(self.tr(u'Generador de clave Catastral'))
        self.actionGeneraclv.setEnabled(False)
        self.actions.append(self.actionGeneraclv)

        ##
        # generador de clave catastral
        
        self.actionRusticos = QtWidgets.QAction(self.iface.mainWindow())
        #iconconst = QtGui.QIcon(os.path.join(os.path.dirname(__file__), "clickconst.png"))
        #self.actionbtnconstrucciones.setIcon(iconconst)
        
        self.actionRusticos.setObjectName("actionRusticos")
        self.actionRusticos.triggered.connect(self.Rusticos)
        
        self.iface.addToolBarIcon(self.actionRusticos)
        self.actionRusticos.setText(self.tr(u'Rusticos'))
        self.actionRusticos.setEnabled(False)
        self.actions.append(self.actionRusticos)

        #menu boton

        #boton multiple
        # self.toolButton = QToolButton()
        # self.toolButton.setMenu(QMenu())
        # self.toolButton.setPopupMode(QToolButton.MenuButtonPopup)
        # self.toolBtnAction = self.iface.addToolBarWidget(self.toolButton)
        
        #agregar elementos combo herramientas
        # m = self.toolButton.menu()
        # m.addAction(self.actionVunitario)
        # self.toolButton.setDefaultAction(self.actionVunitario)
        # m.addAction(self.actionbtnconstrucciones)
        # m.addAction(self.actionIdentificar)
        # m.addAction(self.actionGeneraclv)
        ####
        # fusuon
        
        self.actionFusion = QtWidgets.QAction(self.iface.mainWindow())
        
        self.actionFusion.setObjectName("actionFusion")
        self.actionFusion.triggered.connect(self.fusion)
        self.iface.addToolBarIcon(self.actionFusion)
        self.actionFusion.setText(self.tr(u'Fusion'))
        self.actionFusion.setEnabled(False) 
        self.actions.append(self.actionFusion)


        # Finalizar Trámite
        
        self.actionFinalizartramite = QtWidgets.QAction(self.iface.mainWindow())
        
        self.actionFinalizartramite.setObjectName("actionFinalizartramite")
        self.actionFinalizartramite.triggered.connect(self.finalizarTramite)
        self.iface.addToolBarIcon(self.actionFinalizartramite)
        self.actionFinalizartramite.setText(self.tr(u'Finalizar Trámite'))
        self.actionFinalizartramite.setEnabled(False) 
        self.actions.append(self.actionFinalizartramite)
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&LoginMaster'),
                action)
            self.iface.removeToolBarIcon(action)  
        
        
    
    #iniciar sesion    
    def logins(self):
        #iface.messageBar().pushMessage("exito", "si corre!", level=Qgis.Success)
        global ventanaReg
        if ventanaReg is not None:
            ventanaReg.close()

        

        self.dlg = LoginMasterDialog()
        ventanaReg=self.dlg

        if self.first_start == True:
            #self.first_start = False
            print(self.first_start)
            # show the dialog
            def CloseEvent(self):
                ##self.first_start = True
                #Your desired functionality here
                print('ventana cerrada X')
                            

            self.dlg.closeEvent = CloseEvent
            self.dlg.show()
            # Run the dialog event loop
            result = self.dlg.exec_()
            # See if OK was pressed
            if result:
                #self.first_start = True
                global usuario
                nombre = self.dlg.le_user.text()
                password = self.dlg.le_pass.text()
                usuario=nombre
                gConnMySql = fnConexionServidor()
            
                cur = gConnMySql.cursor()

                cur.execute( "SELECT * FROM usuario WHERE usuario = '" + nombre + "' AND password = '" + password + "'" )        
                if cur.rowcount != 0:
                    ventanaReg=None
                    self.first_start = False
                    
                    self.actionTramites.setEnabled(True)
                    self.actionBusqueda.setEnabled(True)
                    self.actionIdentificar.setEnabled(True)
                    iface.messageBar().pushMessage("Correcto", "Bienvenido", level=Qgis.Success)
                    
                    #urlManzana = "crs=EPSG:32612&dpiMode=7&format=image/png&layers=muestra_manzanas_v2&styles&url=http://localhost:9090/geoserver/nogales_catastro/wms?version%3D1.1.0%26layers%3Dnogales_catastro"
                    urlManzana = "crs=EPSG:32612&dpiMode=7&format=image/png&layers=manzanas&styles&url=http://localhost:9090/geoserver/nogales_catastro/wms?version%3D1.1.0%26layers%3Dnogales_catastro"
                    
                    rlayerManzana = QgsRasterLayer(urlManzana, 'Manzanas', 'wms')
                    if not rlayerManzana.isValid():
                        iface.messageBar().pushMessage("Error", "Layer failed to load!", level=Qgis.Success)
                    QgsProject.instance().addMapLayer(rlayerManzana)
                        
                    
                    #urlPredios = "crs=EPSG:32612&dpiMode=7&format=image/png&layers=muestra_predios_v2&styles&url=http://localhost:9090/geoserver/nogales_catastro/wms?version%3D1.1.0%26layers%3Dnogales_catastro"
                    urlPredios = "crs=EPSG:32612&dpiMode=7&format=image/png&layers=predios&styles&url=http://localhost:9090/geoserver/nogales_catastro/wms?version%3D1.1.0%26layers%3Dnogales_catastro"
                   
                    rlayerPredios = QgsRasterLayer(urlPredios, 'Predios', 'wms')
                    if not rlayerPredios.isValid():
                        iface.messageBar().pushMessage("Error", "Layer failed to load!", level=Qgis.Success)
                        
                    QgsProject.instance().addMapLayer(rlayerPredios)
                    #urlZonas = "crs=EPSG:32612&dpiMode=7&format=image/png&layers=zonas&styles&url=http://localhost:9090/geoserver/nogales_catastro/wms?version%3D1.1.0%26layers%3Dnogales_catastro"
                    urlZonas = "crs=EPSG:32612&dpiMode=7&format=image/png&layers=zonas&styles&url=http://localhost:9090/geoserver/nogales_catastro/wms?version%3D1.1.0%26layers%3Dnogales_catastro"
                    
                    rlayerZonas = QgsRasterLayer(urlZonas , 'Zonas', 'wms')
                    if not rlayerZonas.isValid():
                        iface.messageBar().pushMessage("Error", "Layer failed to load!", level=Qgis.Success)
                        
                    QgsProject.instance().addMapLayer(rlayerZonas)

                    #urlBandas = "crs=EPSG:32612&dpiMode=7&format=image/png&layers=bandas_v1&styles&url=http://localhost:9090/geoserver/nogales_catastro/wms?version%3D1.1.0%26layers%3Dnogales_catastro"
                    urlBandas = "crs=EPSG:32612&dpiMode=7&format=image/png&layers=bandas&styles&url=http://localhost:9090/geoserver/nogales_catastro/wms?version%3D1.1.0%26layers%3Dnogales_catastro"
                    
                    rlayerBandas = QgsRasterLayer(urlBandas  , 'Bandas', 'wms')
                    if not rlayerBandas.isValid():
                        iface.messageBar().pushMessage("Error", "Layer failed to load!", level=Qgis.Success)
                        
                    QgsProject.instance().addMapLayer(rlayerBandas)

                    
                    
                    
                    #urlConstrucciones = "crs=EPSG:32612&dpiMode=7&format=image/png&layers=muestra_construcciones_v2&styles&url=http://localhost:9090/geoserver/nogales_catastro/wms?version%3D1.1.0%26layers%3Dnogales_catastro"
                    urlConstrucciones = "crs=EPSG:32612&dpiMode=7&format=image/png&layers=construcciones&styles&url=http://localhost:9090/geoserver/nogales_catastro/wms?version%3D1.1.0%26layers%3Dnogales_catastro"
                    
                    rlayerConstrucciones = QgsRasterLayer(urlConstrucciones, 'Construcciones', 'wms')
                    if not rlayerConstrucciones.isValid():
                        iface.messageBar().pushMessage("Error", "Layer failed to load!", level=Qgis.Success)
                        
                    QgsProject.instance().addMapLayer(rlayerConstrucciones)
                    cur.close()
                    fnConexionCerrar(gConnMySql)    
                
            
        
            
            
            
            
                
                else:
                    iface.messageBar().pushMessage("Error", "Usuario o contraseña no validos", level=Qgis.Success)
        else:
            iface.messageBar().pushMessage("Error", "ya tiene una sesion iniciada!", level=Qgis.Success)
            
    #buscar
    def buscar(self):
        #iface.messageBar().pushMessage("Buscador", "si corre!", level=Qgis.Success)
        global ventanaBuscar
        if ventanaBuscar is not None:
            ventanaBuscar.close()
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start2 == True:
            #self.first_start2 = False
            self.dlg2 = BuscarDialog()
            ventanaBuscar=self.dlg2
            # auto complete options                                                 
            datos = []
            
            #conexion
            con = None
        
            try:
                con = fnConexionServidorPg() 
                #psycopg2.connect(database='postgis', user='postgres',password='taQ99Zm')
                cur = con.cursor()
                cur.execute("SELECT catastral FROM nogales_catastro.predios WHERE catastral != 'null' " )
                for catastral in cur.fetchall() :
                    nombre = str(catastral)
                    print(nombre[2:-3])
                    datos.append(nombre[2:-3]) 
        
        
            except psycopg2.DatabaseError as e:
                self.iface.messageBar().pushMessage("Error", f'Error {e}', level=Qgis.Success)
                
                 
            cur.close()
            fnConexionCerrarPg(con)
            completer = QCompleter(datos)
            
            #print()
             #create line edit and add auto complete    
            self.dlg2.lineEditbuscar.setText('53000')
            self.dlg2.lineEditbuscar.setCompleter(completer)
            _translate = QtCore.QCoreApplication.translate
            self.dlg2.setWindowTitle(_translate("Dialog", "Búsqueda"))
        
            
            #self.dlg.crs_input.setCrs(QgsCoordinateReferenceSystem(4326))

            # save a project reference
            project = QgsProject.instance()

            # show the dialog
            self.dlg2.show()
            # Run the dialog event loop
            result = self.dlg2.exec_()
            # See if OK was pressed
            if result:
                # Save the user input
                print(self.dlg2.lineEditbuscar.value())
                lineedit_text = self.dlg2.lineEditbuscar.value()
                lineedit_text = lineedit_text.strip()
                lineedit_textsplit=clvText[0:4]
                #crs_input = self.dlg.crs_input.crs()
                if (len(lineedit_text)==12 and lineedit_textsplit=='5300'):
                                
                    con = fnConexionServidorPg()
                    #psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                    cur = con.cursor()
                
                    #cur.execute("SELECT distinct ST_x (ST_centroid(ST_Transform( geom,4326 ))) long, ST_y (ST_centroid(ST_Transform( geom,4326 ))) lat from predios_v2 where catastral = '"+lineedit_text+"'" )
                    cur.execute("select min(ST_XMin(geom)) as l, min(ST_YMin(geom)) as b, max(ST_XMax(geom)) as r, max(ST_YMax(geom)) as t from nogales_catastro.predios  where  catastral = '"+lineedit_text+"'")
                
                    records = cur.fetchall()
                            
                    for row in records: 
                        min_x = row[0]
                        min_y = row[1]
                        max_x = row[2]
                        max_y = row[3]
                
            
                    cur.close()
                    #con.close()
                    fnConexionCerrarPg(con)
                                        
                    bbox_geom = QgsGeometry.fromPolygonXY([[QgsPointXY(min_x, min_y),
                                                        QgsPointXY(min_x, max_y),
                                                        QgsPointXY(max_x, max_y),
                                                        QgsPointXY(max_x, min_y),
                                                        ]])
                
                
                    self.iface.mapCanvas().zoomToFeatureExtent(QgsRectangle.fromWkt(bbox_geom.asWkt()))
                    self.first_start2 = True
                    self.dlg2.close()
                else:
                    iface.messageBar().pushMessage("Buscador", "Clave catastral incorrecta", level=Qgis.Success)
                
       
    #Tramites
    def tramites(self):
        global ventanaTramite
        if ventanaTramite is not None:
            ventanaTramite.close()
            
        
        if self.first_start3 == True:
            #self.first_start3 = False
            self.dlg3 = DialogTramite()
            ventanaTramite=self.dlg3
            self.dlg3.comboBox.addItems(["Seleccionar", "SUBDIVISION URBANA", "SUBDIVISION RUSTICA", "ACTUALIZAR AVALUO", "FUSION RUSTICA", "FUSION URBANA"])
            _translate = QtCore.QCoreApplication.translate
            self.dlg3.setWindowTitle(_translate("Dialog", "Trámites"))
            self.dlg3.show()
            
            gConnMySql = fnConexionServidor()
            if (gConnMySql):
                print("conecta")
                
                def field_select():
                    cur = gConnMySql.cursor()
                    self.dlg3.comboBox_2.clear()
                    sel = str(self.dlg3.comboBox.currentText())
                    ids_gestion = []
                    cur.execute( "SELECT id_gestion FROM gestion WHERE solicitud = '" + sel + "' AND usuario_control = 'Miguelpgm' AND estatus = 'EN TRAMITE'" )
                    for id_gestion in cur.fetchall() :
                        dato_gestion = str(id_gestion)
                        print(dato_gestion)
                        ids_gestion.append(dato_gestion[1:-3])
                    ids_gestion.sort()
                    self.dlg3.comboBox_2.addItems(ids_gestion)
                    cur.close()
                    
            #
            
                  

            # This connects the function to the layer combobox when changed
            print(self.dlg3.comboBox.currentText())
            self.dlg3.comboBox.currentIndexChanged.connect(field_select)
            result = self.dlg3.exec_()
            if result:
                fnConexionCerrar(gConnMySql)
                gConnMySql = fnConexionServidor()
                listaclaves = []
                if (gConnMySql):
                    print("conecta")
                    cur = gConnMySql.cursor()
                    sel = str(self.dlg3.comboBox.currentText())
                    selges = str(self.dlg3.comboBox_2.currentText())
                    print(selges)

                    global clv_catastral, unidades
                    if (sel=="FUSION URBANA" or sel=="FUSION RUSTICA") :
                        print("FUSION RUSTICA")
                        if sel=="FUSION RUSTICA":
                                    self.actionRusticos.setEnabled(True)
                                    print("Rustica")
                                    
                        cur.execute( "SELECT catastral FROM predios_a_procesar WHERE id_gestion = '" + selges + "'" )
                        for catastral in cur.fetchall() :
                            
                            print("gestion u",catastral[0])
                            
                            dato_catastral = str(catastral[0]).split()
                            print(dato_catastral,"split")
                            print(dato_catastral[0])
                            clv_catastral=dato_catastral[0]
                            
                            

                            listaclaves.append(clv_catastral)
                        
                        row = cur.fetchone()
                        
                    else:
                        cur.execute( "SELECT catastral, unidades FROM gestion WHERE id_gestion = '" + selges + "'" )
                        for catastral in cur.fetchall() :
                            
                            print(catastral[0])
                            print(catastral[1])
                            dato_catastral = str(catastral[0]).split()
                            print(dato_catastral,"split")
                            print(dato_catastral[0])
                            clv_catastral=dato_catastral[0]
                            
                            unidades=catastral[1]

                            listaclaves.append(clv_catastral)
                        
                        
                        
                
                
                cur.close()
                fnConexionCerrar(gConnMySql) 


                # todas las gestiones
                selges = str(self.dlg3.comboBox_2.currentText())
                global clv_gestion
                #borrar capas de tramite anterior antes de asignar gestion
                registry = QgsProject.instance()
                

                for layer in QgsProject.instance().mapLayers().values():
                    print(layer.name())
                    lyr_nombre=layer.name()
                    if 'origen' in lyr_nombre:
                        print("origen",lyr_nombre)
                        layer = registry.mapLayersByName( lyr_nombre )[0]
                        QgsProject.instance().removeMapLayer(layer.id())
                    
                    if 'predio_calculos' in lyr_nombre:
                        print("calculos",lyr_nombre)
                        layer = registry.mapLayersByName( lyr_nombre )[0]
                        QgsProject.instance().removeMapLayer(layer.id())
                    
                    
                    
                
                            
                #gestion variable global
                clv_gestion = selges
                claves = ''
                # todas las gestiones
                ### 
                self.actionbtnconstrucciones.setEnabled(True)
                self.actionVunitario.setEnabled(True)
                self.actionFusion.setEnabled(False) 
                self.actionGeneraclv.setEnabled(False)
                
                con = fnConexionServidorPg()
                cur = con.cursor()               
                cur.execute("select exists(select relname from pg_class where relname='predio_gestion_"+selges+"')")
                exists = cur.fetchone()[0]
                print (exists)
                con.commit()

                if exists==False:

                        try:

                            con = fnConexionServidorPg()
                            cur = con.cursor()
                            cur.execute("select nogales_catastro.tablagestion("+selges+",'"+clv_catastral+"')")
                            con.commit()
                            print ('Tabla creada')
                        except psycopg2.DatabaseError as e:
                            print(f'Error {e}')
                    
                        #   Cargar Capa  de id gestion
                        fnConexionCerrarPg(con)
                        if sel=="FUSION URBANA" or sel=="FUSION RUSTICA":
                                
                                self.actionbtnconstrucciones.setEnabled(False)
                                self.actionVunitario.setEnabled(False)
                                self.actionGeneraclv.setEnabled(False)
                                self.actionFusion.setEnabled(True)  
                                #DELETE FROM nogales_catastro.predio_origen CASCADE;
                                for clave in listaclaves:
                                    print("claves",str(listaclaves[-1]))
                                    if clave == str(listaclaves[-1]):
                                        claves = claves + 'catastral = \'' + clave + '\''
                                    else:
                                        claves = claves + 'catastral = \'' + clave + '\' or '
                                select = 'INSERT INTO nogales_catastro.predio_gestion_'+selges+'(fid, claves, clv_mzn, catastral, zona_h, valor_zona, valor_band, ubicacion_, propie, id_gestion, area_terre, id_catastr, usuario, condominio, geom) (SELECT gid, claves, clv_mzn, catastral, zona_h, valor_zona, valor_band, ubicacion_, propie, id_gestion, area_terre, id_catastr, usuario, condominio, geom FROM nogales_catastro.predios where ' + claves + ' order by catastral )'
                                selecth = 'INSERT INTO historico_nogales_catastro.historico_predios_geo(fid, claves, clv_mzn, catastral, zona_h, valor_zona, valor_band, ubicacion_, propie, id_gestion, area_terre, id_catastr, usuario, condominio, geom) (SELECT gid, claves, clv_mzn, catastral, zona_h, valor_zona, valor_band, ubicacion_, propie, id_gestion, area_terre, id_catastr, usuario, condominio, geom FROM nogales_catastro.predios where ' + claves + ' order by catastral )'
                                selectconstucciones = 'INSERT INTO nogales_catastro.construcciones_gestion_'+selges+' (fid, mslink, mapid, clavecat, matriz1, matriz2, tipoconst, edadconst, nivconst, area_pol, area_const, catastral, niveles, nivel, id_catastr, id_gestion, usuario, fecha_a_ed, bloque, geom) (SELECT gid, mslink, mapid, clavecat, matriz1, matriz2, tipoconst, edadconst, nivconst, area_pol, area_const, catastral, niveles, nivel, id_catastr, id_gestion, usuario, fecha_a_ed, bloque, geom from nogales_catastro.construcciones where ' + claves + ' order by catastral )'
                                selectconstruccionesh = 'INSERT INTO historico_nogales_catastro.historico_construcciones_geo (fid, mslink, mapid, clavecat, matriz1, matriz2, tipoconst, edadconst, nivconst, area_pol, area_const, catastral, niveles, nivel, id_catastr, id_gestion, usuario, fecha_a_ed, bloque, geom) (SELECT gid, mslink, mapid, clavecat, matriz1, matriz2, tipoconst, edadconst, nivconst, area_pol, area_const, catastral, niveles, nivel, id_catastr, id_gestion, usuario, fecha_a_ed, bloque, geom from nogales_catastro.construcciones where ' + claves + ' order by catastral )'
                                
                                
                                # Creación de la tabla y agrega al mapa
                                # Creación de la Tabla o Vista
                                con = None
                                try:
                                    con = fnConexionServidorPg()
                                    cur = con.cursor()
                                    cur.execute("Delete FROM nogales_catastro.predio_gestion_"+selges+";")
                                    cur.execute(select)
                                    cur.execute(selecth)
                                    cur.execute(selectconstucciones)
                                    cur.execute(selectconstruccionesh)
                                    con.commit()
                                    print ('Tabla creada')
                                except psycopg2.DatabaseError as e:
                                    print(f'Error {e}')
                                fnConexionCerrarPg(con)


                uri = QgsDataSourceUri()
                uri.setConnection("localhost", "5432", "postgis", "postgres", "n0g@p0stg35")
                uri.setDataSource("nogales_catastro", "predio_gestion_"+selges+"", "geom")
                layer = QgsVectorLayer(uri.uri(), "predio_origen", "postgres")
                #color a predios

                #single_symbol_renderer = layer.renderer()

                #symbol = single_symbol_renderer.symbol()

                #symbol.setColor(QColor.fromRgb(60,114,213))
                

                layer.triggerRepaint()

                QgsProject.instance().addMapLayer(layer)
                extent = layer.extent()
                canvas = iface.mapCanvas()
                canvas.setExtent(extent)
                #
                        
                
                uri = QgsDataSourceUri()
                uri.setConnection("localhost", "5432", "postgis", "postgres", "n0g@p0stg35")
                uri.setDataSource("nogales_catastro", "construcciones_gestion_"+selges+"", "geom")
                layerConst = QgsVectorLayer(uri.uri(), "construcciones_origen", "postgres")
                QgsProject.instance().addMapLayer(layerConst)

                #color a construcciones

                #single_symbol_renderer = layerConst.renderer()

                #symbol = single_symbol_renderer.symbol()

                #symbol.setColor(QColor.fromRgb(48, 207, 199))
                

                layerConst.triggerRepaint()



                self.first_start3 = True
                global selTramite
                selTramite = str(self.dlg3.comboBox.currentText())
                print(selTramite)
                self.iface.actionPan().trigger()

                if selTramite == "SUBDIVISION URBANA":
                     self.actionGeneraclv.setEnabled(True)
                     self.actionbtnconstrucciones.setEnabled(False)
                     self.actionVunitario.setEnabled(False)
                if selTramite == "SUBDIVISION RUSTICA":
                     self.actionGeneraclv.setEnabled(False)
                     self.actionbtnconstrucciones.setEnabled(False)
                     self.actionVunitario.setEnabled(False)
                     self.actionRusticos.setEnabled(True)
                
                self.dlg3.close()

    #catysal
    def catysal(self):
        iface.messageBar().pushMessage("identificar", "si corre!", level=Qgis.Success)
        
        #coordenadas
        class SendPointToolCoordinates(QgsMapTool):
    
            def __init__(self, canvas, layer):
        
                QgsMapTool.__init__(self, canvas)
                self.canvas = canvas
                self.layer = layer
                #self.setCursor(Qt.CrossCursor)
                #QgsApplication.instance().setOverrideCursor(QCursor(QPixmap(os.path.join(os.path.dirname(__file__), "clickcatysal.png"))))
                
                
                
            
            def canvasReleaseEvent(self, event):
                                
                point = self.toLayerCoordinates(self.layer, event.pos())
                global clavecat
                try:
                    con = fnConexionServidorPg()
                    #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                    cur = con.cursor()
                    px= str(point.x())
                    py= str(point.y())
                    print(point.x(), point.y())
                    cur.execute("SELECT nogales_catastro.catastralxy ("+px+" , "+py+") " )
                    #con.commit()
                    
                    for x in cur.fetchall():
                        global clavecat
                        print("convertir a texto")
                        print(x)
                        clavestr=str(x)
                        clavecat=clavestr[2:-3]
                        print(clavecat)
                    print (cur.fetchall())
                    if clavecat=="DUPLICADOS O ERROR":
                        iface.messageBar().pushMessage("Error", "Seleccione un predio", level=Qgis.Success)
                    else:
                        self.Catysal = QtWidgets.QDialog()
                        ui = Ui_Catysal()
                        ui.setupUi(self.Catysal)
                        ui.mLineEdit_2.setText(clavecat)
                        self.Catysal.show()
                        llenadatos(ui)
                
                except psycopg2.DatabaseError as e:
                    print(f'Error {e}')

             

        layer = iface.activeLayer()
        canvas = iface.mapCanvas() 

        send_point_tool_coordinates = SendPointToolCoordinates(canvas,layer)
        
        canvas.setMapTool(send_point_tool_coordinates)   
       

    def construccionesxy(self):
        #iface.messageBar().pushMessage("identificar", "si corre!", level=Qgis.Success)
        
        #coordenadas
        class SendPointToolCoordinates(QgsMapTool):
    
            def __init__(self, canvas, layer):
        
                QgsMapTool.__init__(self, canvas)
                self.canvas = canvas
                self.layer = layer
                #iconconst = QtGui.QIcon(os.path.join(os.path.dirname(__file__), "editmaps.png"))
                #QgsApplication.instance().setOverrideCursor(QCursor(QPixmap(os.path.join(os.path.dirname(__file__), "clickconst.png"))))
                #self.setCursor(QCursor(iconconst))
                #QApplication.instance().setOverrideCursor(QCursor(iconconst))
                
                
            
            def canvasReleaseEvent(self, event):
                global ventanaD
                if ventanaD is not None:
                    ventanaD.close()

                if not self.layer.isEditable():
                    print("no esta en edicion")
                else:
                    print("salir de modo edicion")
                    self.layer.commitChanges()
                    
                                
                point = self.toLayerCoordinates(self.layer, event.pos())
                global clv_gid , xy_catastral, clv_catastral
                try:
                    con = fnConexionServidorPg()
                    #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                    cur = con.cursor()
                    px= str(point.x())
                    py= str(point.y())
                    print(point.x(), point.y())
                    #cur.execute("SELECT nogales_catastro.constgidxy ("+px+" , "+py+") " )
                    cur.execute("SELECT a.gid FROM nogales_catastro.construcciones_gestion_"+clv_gestion+" a WHERE ST_Intersects(a.geom, 'SRID=32612;POINT("+px+"  "+py+")'::geometry);" )
                                        
                    for x in cur.fetchall():
                        global clv_gid
                        print("convertir a texto")
                        print(x)
                        clavestr=str(x[0])
                        clv_gid=clavestr
                        print(clv_gid)
                    con.commit()
                except psycopg2.DatabaseError as e:
                    print(f'Error {e}') 
                print("clave gid",clv_gid)
                if clv_gid == "DUPLICADOS O ERROR":
                    iface.messageBar().pushMessage("seleccione una construccion", level=Qgis.Success)
                else:
                    print("entra gid")
                
                    try:
                        con = fnConexionServidorPg()
                        #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                        cur = con.cursor()
                        px= str(point.x())
                        py= str(point.y())
                        print(point.x(), point.y())
                        #cur.execute("SELECT nogales_catastro.prediorigencatxy ("+px+" , "+py+") " )
                        cur.execute("SELECT a.catastral FROM nogales_catastro.predio_gestion_"+clv_gestion+" a WHERE ST_Intersects(a.geom, 'SRID=32612;POINT("+px+"  "+py+")'::geometry);" )
                    
                        #con.commit()
                        
                        for x in cur.fetchall():
                            global xy_catastral
                            print("convertir a texto")
                            print(x)
                            clavestr=str(x)
                            xy_catastral=clavestr[2:-3]
                            print(xy_catastral)
                        con.commit()

                        #### crea ventana ######
                        if len(xy_catastral)>0:
                            registry = QgsProject.instance()

                            layer = registry.mapLayersByName( 'construcciones_origen' )[0]
                            
                            for f in layer.getFeatures():
                                print("clv_gid",clv_gid)
                                print("gid",f.attribute("gid"))
                                if str(f.attribute("gid"))==str(clv_gid):
                                    print("entra")
                                    areat = f.geometry().area()
                                    fid=f.attribute("fid")
                                    matrizf = f.attribute("matriz1")
                                    bloquef = f.attribute("bloque")
                                    nivelf = f.attribute("nivel")
                                    poliqg=f.geometry()
                                    geom=f.geometry().asWkt()

                                    print(str(areat))
                            

                            self.dialog = QtWidgets.QDialog()
                            #global ventanaD
                            ventanaD=self.dialog
                            ui = Ui_construcciones()
                            ui.setupUi(self.dialog)
                            ui.mLineEdit_7.setText(xy_catastral)
                            self.dialog.show()
                            print("matrizF", matrizf)
                            if matrizf == 'NULL':
                                print("matrix null")
                            elif matrizf:
                                llenadatosConst(ui,matrizf,bloquef,nivelf)
                            else:
                                print("matrix null")
                            cargaDatos(ui)

                            #bloqueMaximo(ui,bloque)
                            #result = self.dialog.exec_()
                            clv_catastral=xy_catastral
                            

                            result = self.dialog.exec_()
                            # See if OK was pressed
                            if result:
                                #global  condominio, sector, zona, valorzona, valorbanda
                                
                                
                                areaterreno=str(areat)
                                print(str(fid))
                                print(str(poliqg))
                                print(str(geom))                            
                                print(areaterreno)
                                val_const=valores_cat(ui)
                                print(val_const)
                                #bloque_max=str(val_const[0])
                                matrizd=str(val_const[1])
                                tipologia_construccion=str(val_const[2] )
                                valor_construccion=str(val_const[3])
                                id_vuc=str(val_const[4])
                                nivel=str(val_const[5])
                                
                            
                                
                                global usuario
                                quertyup="Update nogales_catastro.construcciones_gestion_"+clv_gestion+" SET fid="+str(clv_gid)+", clavecat='"+clv_catastral+"', matriz1='"+matrizd+"', tipoconst='"+tipologia_construccion+"', nivconst="+str(nivel)+",area_const="+str(areaterreno)+", catastral='"+clv_catastral+"', niveles="+str(nivel)+", nivel="+str(nivel)+", id_gestion="+str(clv_gestion)+",usuario='"+usuario+"', geom=ST_GeomFromText('"+str(geom)+"', 32612) where gid ="+str(clv_gid)
                                quertyincert="Update nogales_catastro.construcciones_gestion_"+clv_gestion+" SET clavecat='"+clv_catastral+"', matriz1='"+matrizd+"', tipoconst='"+tipologia_construccion+"', nivconst="+str(nivel)+",area_const="+str(areaterreno)+", catastral='"+clv_catastral+"', niveles="+str(nivel)+", nivel="+str(nivel)+", id_gestion="+str(clv_gestion)+",usuario='"+usuario+"', geom=ST_GeomFromText('"+str(geom)+"', 32612),ban_const=1 where gid ="+str(clv_gid)
                                
                                try:
                                    con = fnConexionServidorPg()
                                    cur = con.cursor() 
                                    cur.execute(quertyincert)
                                    con.commit()
                                    
                                    
                                except psycopg2.DatabaseError as e:
                                    print(f'Error {e}')
                                
                                
                               

                            else:
                                

                                self.dialog.close()

                        
                    #####################3
                    except psycopg2.DatabaseError as e:
                        print(f'Error {e}')
        layer = iface.activeLayer()
        canvas = iface.mapCanvas() 

        send_point_tool_coordinates = SendPointToolCoordinates(canvas,layer)
        
        canvas.setMapTool(send_point_tool_coordinates)   
       

#### herramienta predios

    def prediosxy(self):
        btnTramite=self.actionFinalizartramite
        #coordenadas
        class SendPointToolCoordinates(QgsMapTool):
    
            def __init__(self, canvas, layer):
                #QgsApplication.instance().setOverrideCursor(QCursor(QPixmap(os.path.join(os.path.dirname(__file__), "clickpredio.png"))))
                
                QgsMapTool.__init__(self, canvas)
                self.canvas = canvas
                self.layer = layer
                
                #self.setCursor(Qt.CrossCursor)
                #QgsApplication.instance().restoreOverrideCursor()
                
                
            
            def canvasReleaseEvent(self, event):
                global ventanapredios
                if ventanapredios is not None:
                    ventanapredios.close()

                if not self.layer.isEditable():
                    print("no esta en edicion")
                else:
                    print("salir de modo edicion")
                    self.layer.commitChanges()
                    
                                
                point = self.toLayerCoordinates(self.layer, event.pos())
                global clv_gid_predio , xy_catastral_ptrdio, clv_catastral_predio, clv_gestion, usuario
                try:
                    con = fnConexionServidorPg()
                    #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                    cur = con.cursor()
                    px= str(point.x())
                    py= str(point.y())
                    print(point.x(), point.y())
                    #cur.execute("SELECT nogales_catastro.prediogidxy("+px+" , "+py+") " )
                    cur.execute("SELECT a.gid FROM nogales_catastro.predio_gestion_"+clv_gestion+" a WHERE ST_Intersects(a.geom, 'SRID=32612;POINT("+px+"  "+py+")'::geometry);" )
                    
                    for x in cur.fetchall():
                        global clv_gid_predio
                        print(x[0])
                        print("convertir a texto")
                        print(x)
                        clavestr=str(x[0])
                        clv_gid_predio=clavestr
                        print("select clv_gid_predio",clv_gid_predio)
                    con.commit()
                    fnConexionCerrarPg(con)
                except psycopg2.DatabaseError as e:
                    print(f'Error {e}') 
                print("clave gid",clv_gid_predio)
                if clv_gid_predio == "DUPLICADOS O ERROR":
                    iface.messageBar().pushMessage("Error", "seleccione unpredio", level=Qgis.Success)
                else:
                    print("entra gid")
                
                    try:
                        con = fnConexionServidorPg()
                        #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                        cur = con.cursor()
                        px= str(point.x())
                        py= str(point.y())
                        print(point.x(), point.y())
                        #cur.execute("SELECT nogales_catastro.prediorigencatxy("+px+" , "+py+") " )
                        cur.execute("SELECT a.catastral FROM nogales_catastro.predio_gestion_"+clv_gestion+" a WHERE ST_Intersects(a.geom, 'SRID=32612;POINT("+px+"  "+py+")'::geometry);" )
                    
                        #con.commit()
                        
                        for x in cur.fetchall():
                            global xy_catastral_ptrdio
                            print("convertir a texto")
                            print(x)
                            clavestr=str(x)
                            xy_catastral_ptrdio=clavestr[2:-3]
                            print(xy_catastral_ptrdio)
                        con.commit()
                        fnConexionCerrarPg(con)

                        #### crea ventana ######
                        if len(clv_gid_predio)>0:
                            registry = QgsProject.instance()
                            ############ llena datos desde qgis##########

                            layer = registry.mapLayersByName( 'predio_origen' )[0]
                            
                            ban_catastral_gestion=0
                            for f in layer.getFeatures():
                                print("clv_gid_predio",clv_gid_predio)
                                print("gid",f.attribute("gid"))
                                if f.attribute("catastral")==clv_catastral:
                                    ban_catastral_gestion+=1


                                if str(f.attribute("gid"))==str(clv_gid_predio):
                                    print("entra")
                                    areaterreno = f.geometry().area()
                                    gid=f.attribute("fid")
                                    clv_catastral_predio=f.attribute("catastral")
                                    bandera_car=f.attribute("ban_cat")
                                    poliqg=f.geometry()
                                    geom=f.geometry().asWkt()

                                    print(str(areaterreno))
                            global selTramite, unidades
                            if selTramite == "SUBDIVISION URBANA":
                                if ban_catastral_gestion==0:
                                    iface.messageBar().pushMessage("Error", "Al menos un predio deve contar con la clave catastral de origen", level=Qgis.Success)
                                    ventanapredios=None
                                elif ban_catastral_gestion>1: 
                                    iface.messageBar().pushMessage("Error", "Dos predios no pueden tener la misma clave catastral", level=Qgis.Success)
                                    ventanapredios=None
                                elif  layer.featureCount() > unidades:
                                    iface.messageBar().pushMessage("Error", "No puede tener mas de "+str(unidades)+" predios", level=Qgis.Success)
                                        
                                else:
                                    print(selTramite)
                                    self.dialog = QtWidgets.QDialog()
                                    ventanapredios=self.dialog
                                    ui = Ui_Guardar()
                                    ui.setupUi(self.dialog)
                                    ui.mLineEdit_2.setText(clv_gestion)
                                    ui.mLineEdit_3.setText(clv_catastral_predio)
                                    def CloseEvent(self):
                                        #Your desired functionality here
                                        print('ventana cerrada X')
                                        ventanapredios.close()

                                    self.dialog.closeEvent = CloseEvent
                                    self.dialog.show()
                                    datosPredios(ui)
                            else:
                                ######### dialogo predios
                                print(selTramite)

                                self.dialog = QtWidgets.QDialog()
                                ventanapredios=self.dialog
                                ui = Ui_Guardar()
                                ui.setupUi(self.dialog)
                                ui.mLineEdit_2.setText(clv_gestion)
                                ui.mLineEdit_3.setText(clv_catastral_predio)
                                def CloseEvent(self):
                                    #Your desired functionality here
                                    print('ventana cerrada X')
                                    ventanapredios.close()
                                    

                                    

                                self.dialog.closeEvent = CloseEvent
                                self.dialog.show()
                                datosPredios(ui)


                                ##########################

                                #bloqueMaximo(ui,bloque)
                                #result = self.dialog.exec_()
                           
                            
                            if ventanapredios is not None:
                                    result = ventanapredios.exec_()
                                    # See if OK was pressed
                                    if result:
                                        condominio=0

                                        if ui.checkBox.isChecked():
                                             print("true")
                                             condominio=1
                                        
                                        datospgeom=valores(ui)

                                        print(datospgeom)
                                        print(datospgeom[0])

                                        tipo_Sector=datospgeom[0]
                                        clv_mzn=datospgeom[1]
                                        #clv_gestion=int(datospgeom[2])
                                        clv_catastral_predio=datospgeom[3]
                                        valorT=datospgeom[4]
                                        terreno=datospgeom[5]
                                        zona=datospgeom[6]
                                        banda_max=datospgeom[7]
                                        valorUG=datospgeom[8]
                                        fsctorI=datospgeom[9]
                                        valoresZb=str(datospgeom[10])
                                        zonaH=str(datospgeom[11])
                                        
                                        
                                        #global clv_catastral
                                        #
                                        if not valorUG:
                                            return iface.messageBar().pushMessage("falta calcular valor unitario", level=Qgis.Success)
                                        else:
                                            try:
                                                con = fnConexionServidorPg()
                                                    
                                                cur = con.cursor()
                                                if clv_catastral_predio==clv_catastral:
                                                    print(clv_catastral_predio)
                                                    print("entra select",clv_gid_predio)
                                                    #cur.execute("Update nogales_catastro.predios SET clv_mzn='"+clv_mzn+"', catastral='"+clv_catastral_predio+"', valor_zona="+str(zona)+", valor_band="+str(banda_max)+", id_gestion="+str(clv_gestion)+", area_terre="+str(areaterreno)+", geom=ST_GeomFromText('"+str(geom)+"', 32612) where gid ="+str(gid)+"")
                                                    cur.execute("Update nogales_catastro.predio_gestion_"+clv_gestion+" SET clv_mzn='"+clv_mzn+"', catastral='"+clv_catastral_predio+"', valor_zona="+str(zona)+", valor_band="+str(banda_max)+", id_gestion="+str(clv_gestion)+", area_terre="+str(areaterreno)+",usuario='"+usuario+"' , condominio="+str(condominio)+",geom=ST_GeomFromText('"+str(geom)+"', 32612), ban_cat=2 where gid ="+str(clv_gid_predio)+"")
                                                    con.commit()
                                                else:
                                                    #cur.execute("insert into nogales_catastro.predios (clv_mzn, catastral, valor_zona, valor_band, id_gestion, area_terre, geom) values ('"+clv_mzn+"','"+clv_catastral_predio+"',"+str(zona)+","+str(banda_max)+","+str(clv_gestion)+","+str(areaterreno)+",ST_GeomFromText('"+str(geom)+"', 32612))")
                                                    cur.execute("Update nogales_catastro.predio_gestion_"+clv_gestion+" SET clv_mzn='"+clv_mzn+"', catastral='"+clv_catastral_predio+"', valor_zona="+str(zona)+", valor_band="+str(banda_max)+", id_gestion="+str(clv_gestion)+", area_terre="+str(areaterreno)+",usuario='"+usuario+"' , condominio="+str(condominio)+", geom=ST_GeomFromText('"+str(geom)+"', 32612), ban_cat=2 where gid ="+str(clv_gid_predio)+"")
                                                    con.commit()                                                                                                                           
                                                
                                                
                                            except psycopg2.DatabaseError as e:
                                                print(f'Error {e}')

                                            lyrconst = registry.mapLayersByName( 'construcciones_origen' )[0]
                                            
                                            ###########################################################################################################
                                                                                        
                                            ban_error=0
                                            bloquepredio=0
                                            for feature in lyrconst.getFeatures():
                                                bloquepredio +=1
                                                
                                                print(feature["matriz1"])
                                                if feature["fid"]=='NULL':
                                                    iface.messageBar().pushMessage("Hay construcciones sin guardar", level=Qgis.Success) 
                                                    ban_error=1
                                                    
                                                    self.dialog.close() 
                                                    break

                                                elif feature["matriz1"]=='NULL' or feature["matriz1"]=='' or not feature["matriz1"]:
                                                    ban_error=1
                                                    iface.messageBar().pushMessage("Hay construcciones sin guardar", level=Qgis.Success)
                                                    self.dialog.close()
                                                    
                                                    break
                                                    
                                                else:
                                                    try:
                                                        con = fnConexionServidorPg()
                                                        
                                                        cur = con.cursor()
                                                        
                                                        cur.execute("Update nogales_catastro.construcciones_gestion_"+clv_gestion+" SET bloque="+str(bloquepredio)+" where gid="+str(feature["gid"]))    
                                                        #cur.execute("INSERT INTO nogales_catastro.construcciones_gestion_"+clv_gestion+"(gid, mslink, mapid, clavecat, matriz1, matriz2, tipoconst, edadconst, nivconst, area_pol, area_const, catastral, niveles, nivel, id_catastr, id_gestion, usuario, fecha_a_ed, bloque, geom) (SELECT fid, mslink, mapid, clavecat, matriz1, matriz2, tipoconst, edadconst, nivconst, area_pol, area_const, catastral, niveles, nivel, id_catastr, id_gestion, usuario, fecha_a_ed, bloque, geom FROM nogales_catastro.construcciones_gestion_"+clv_gestion+" where catastral='" +str(clv_catastral)+ "' order by catastral)")
                                                        con.commit()
                                                        #print ('Tabla creada')
                                                    except psycopg2.DatabaseError as e:
                                                        print("insert construcciones")
                                                        print(f'Error {e}')


                                            if ban_error==1:
                                                iface.messageBar().pushMessage("El predio no se guardo por error en las construcciones", level=Qgis.Success) 
                                                print("error sale del loop")
                                              
                                        btnTramite.setEnabled(True)
                                    else:
                                        print("boton cancelar")
                                        # regresa color  predios
                                        ventanapredios.close()
                                    

                        
                    #####################3
                    except psycopg2.DatabaseError as e:
                        print(f'Error {e}')


        layer = iface.activeLayer()
        canvas = iface.mapCanvas() 

        send_point_tool_coordinates = SendPointToolCoordinates(canvas,layer)
        
        canvas.setMapTool(send_point_tool_coordinates)   



#### generar clave cat

    def generaClvcat(self):
        btnCost=self.actionbtnconstrucciones
        btnVu=self.actionVunitario
        
        #coordenadas
        class SendPointToolCoordinates(QgsMapTool):
    
            def __init__(self, canvas, layer):
                #QgsApplication.instance().setOverrideCursor(QCursor(QPixmap(os.path.join(os.path.dirname(__file__), "clickpredio.png"))))
                
                QgsMapTool.__init__(self, canvas)
                self.canvas = canvas
                self.layer = layer
                
                #self.setCursor(Qt.CrossCursor)
                #QgsApplication.instance().restoreOverrideCursor()
                
                
            
            def canvasReleaseEvent(self, event):
                global ventanaClave
                if ventanaClave is not None:
                    ventanaClave.close()
                
                if not self.layer.isEditable():
                    print("no esta en edicion")
                else:
                    print("salir de modo edicion")
                    self.layer.commitChanges()

                point = self.toLayerCoordinates(self.layer, event.pos())
                global clv_gid_predio , xy_catastral_ptrdio, clv_catastral_predio, clv_gestion, usuario
                try:
                    con = fnConexionServidorPg()
                    #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                    cur = con.cursor()
                    px= str(point.x())
                    py= str(point.y())
                    print(point.x(), point.y())
                    #cur.execute("SELECT nogales_catastro.prediogidxy("+px+" , "+py+") " )
                    cur.execute("SELECT a.gid FROM nogales_catastro.predio_gestion_"+clv_gestion+" a WHERE ST_Intersects(a.geom, 'SRID=32612;POINT("+px+"  "+py+")'::geometry);" )
                    
                    
                    for x in cur.fetchall():
                        global clv_gid_predio
                        print(x[0])
                        print("convertir a texto")
                        print(x)
                        clavestr=str(x[0])
                        clv_gid_predio=clavestr
                        print(clv_gid_predio)
                    con.commit()
                    fnConexionCerrarPg(con)
                except psycopg2.DatabaseError as e:
                    print(f'Error {e}') 
                print("clave gid",clv_gid_predio)
                if clv_gid_predio == "DUPLICADOS O ERROR":
                    iface.messageBar().pushMessage("Error", "seleccione unpredio", level=Qgis.Success)
                else:
                    print("entra gid")
                
                        #### crea ventana ######
                    if len(clv_gid_predio)>0:
                        global clv_catastral, unidades
                        registry = QgsProject.instance()
                        ############ llena datos desde qgis##########
                        layer = registry.mapLayersByName( 'predio_origen' )[0]
                        print("numero:", layer.featureCount())
                        if layer.featureCount() <= 1:
                            iface.messageBar().pushMessage("Error", "Debe subdividir el predio antes de generar la nueva clave catastral", level=Qgis.Success)
                        elif  layer.featureCount() > unidades:
                            iface.messageBar().pushMessage("Error", "No puede tener mas de "+str(unidades)+" predios", level=Qgis.Success)
                        
                        
                        else:
                            num_clvs_igiales=0
                            for f in layer.getFeatures():
                                
                                print("clv_gid_predio",clv_gid_predio)
                                print("gid",f.attribute("gid"))
                                if f.attribute("catastral") == clv_catastral:
                                        num_clvs_igiales+=1
                                if str(f.attribute("gid"))==str(clv_gid_predio):
                                    print("entra")
                                    areaterreno = f.geometry().area()
                                    gid=f.attribute("fid")
                                    poliqg=f.geometry()
                                    geom=f.geometry().asWkt()
                                    
                                    print(str(areaterreno))
                            ####### ll #########################
                                

                            ######### dialogo predios
                            if selTramite=="SUBDIVISION RUSTICA":

                                    self.dialog = QtWidgets.QDialog()
                                    ventanaClave=self.dialog
                                    ui = Ui_clv_CatR()
                                    ui.setupUi(self.dialog,clv_catastral,clv_gestion)
                                    ui.mLineEdit.setText(clv_catastral)
                                    def CloseEvent(self):
                                        
                                        print('ventana cerrada X')
                                        ventanaClave.close()
                                    self.dialog.closeEvent = CloseEvent
                                    self.dialog.show()
                            else:
                                self.dialog = QtWidgets.QDialog()
                                ventanaClave=self.dialog
                                ui = Ui_clv_CatR()
                                ui.setupUi(self.dialog,clv_catastral,clv_gestion)
                                ui.mLineEdit.setText(clv_catastral)
                                def CloseEvent(self):
                                    
                                    print('ventana cerrada X')
                                    ventanaClave.close()
                                self.dialog.closeEvent = CloseEvent
                                self.dialog.show()
                            
                                


                            ##########################

                            result = self.dialog.exec_()
                            # See if OK was pressed
                            if result:
                                datosGenclv=datosClv(ui)
                                print(datosGenclv)
                                nuevaClave=datosGenclv[0]
                                print("claves iguales",num_clvs_igiales)
                                if num_clvs_igiales==1 and nuevaClave!=clv_catastral:
                                    print(num_clvs_igiales)
                                    print(nuevaClave)

                                    iface.messageBar().pushMessage("Error", "Por lo menos un predio debe concervar la clave catastral original", level=Qgis.Success)
                                else:

                                    try:
                                        con = fnConexionServidorPg()
                                        print("gid",clv_gid_predio)
                                        cur = con.cursor()
                                        if selTramite=="SUBDIVISION RUSTICA":
                                                cur.execute("Update nogales_catastro.predio_gestion_"+clv_gestion+" SET catastral='"+nuevaClave+"',area_terre="+str(areaterreno)+", ban_cat=1, categoria='"+datosGenclv[0]+"' where gid="+clv_gid_predio)
                                        else:
                                                cur.execute("Update nogales_catastro.predio_gestion_"+clv_gestion+" SET catastral='"+nuevaClave+"', ban_cat=1 where gid="+clv_gid_predio)
                                        con.commit()
                                        #print ('Tabla creada')
                                        btnCost.setEnabled(True)
                                        btnVu.setEnabled(True)
                                    except psycopg2.DatabaseError as e:
                                        print(f'Error {e}')
                                    cur.close()
                                    fnConexionCerrarPg(con)
                                
                     
           

        layer = iface.activeLayer()
        canvas = iface.mapCanvas() 

        send_point_tool_coordinates = SendPointToolCoordinates(canvas,layer)
        
        canvas.setMapTool(send_point_tool_coordinates)   

#### Predios Rusticos

    def Rusticos(self):
        btnTramite=self.actionFinalizartramite
        
        
        
        #coordenadas
        class SendPointToolCoordinates(QgsMapTool):
    
            def __init__(self, canvas, layer):
                #QgsApplication.instance().setOverrideCursor(QCursor(QPixmap(os.path.join(os.path.dirname(__file__), "clickpredio.png"))))
                
                QgsMapTool.__init__(self, canvas)
                self.canvas = canvas
                self.layer = layer
                
                #self.setCursor(Qt.CrossCursor)
                #QgsApplication.instance().restoreOverrideCursor()
                
                
            
            def canvasReleaseEvent(self, event):
                global ventanaRustico
                if ventanaRustico is not None:
                    ventanaRustico.close()
                
                if not self.layer.isEditable():
                    print("no esta en edicion")
                else:
                    print("salir de modo edicion")
                    self.layer.commitChanges()

                point = self.toLayerCoordinates(self.layer, event.pos())
                global clv_gid_predio , xy_catastral_ptrdio, clv_catastral_predio, clv_gestion, usuario
                try:
                    con = fnConexionServidorPg()
                    #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                    cur = con.cursor()
                    px= str(point.x())
                    py= str(point.y())
                    print(point.x(), point.y())
                    #cur.execute("SELECT nogales_catastro.prediogidxy("+px+" , "+py+") " )
                    cur.execute("SELECT a.gid FROM nogales_catastro.predio_gestion_"+clv_gestion+" a WHERE ST_Intersects(a.geom, 'SRID=32612;POINT("+px+"  "+py+")'::geometry);" )
                    
                    
                    for x in cur.fetchall():
                        global clv_gid_predio
                        print(x[0])
                        print("convertir a texto")
                        print(x)
                        clavestr=str(x[0])
                        clv_gid_predio=clavestr
                        print(clv_gid_predio)
                    con.commit()
                    fnConexionCerrarPg(con)
                except psycopg2.DatabaseError as e:
                    print(f'Error {e}') 
                print("clave gid",clv_gid_predio)
                if clv_gid_predio == "DUPLICADOS O ERROR":
                    iface.messageBar().pushMessage("Error", "seleccione unpredio", level=Qgis.Success)
                else:
                    print("entra gid")
                
                        #### crea ventana ######
                    if len(clv_gid_predio)>0:
                        global clv_catastral, unidades
                        registry = QgsProject.instance()
                        ############ llena datos desde qgis##########
                        layer = registry.mapLayersByName( 'predio_origen' )[0]
                        print("numero:", layer.featureCount())
                        if layer.featureCount() <= 1:
                            iface.messageBar().pushMessage("Error", "Debe subdividir el predio antes de generar la nueva clave catastral", level=Qgis.Success)
                        elif  layer.featureCount() > unidades:
                            iface.messageBar().pushMessage("Error", "No puede tener mas de "+str(unidades)+" predios", level=Qgis.Success)
                        
                        
                        else:
                            num_clvs_igiales=0
                            for f in layer.getFeatures():
                                
                                print("clv_gid_predio",clv_gid_predio)
                                print("gid",f.attribute("gid"))
                                if f.attribute("catastral") == clv_catastral:
                                        num_clvs_igiales+=1
                                if str(f.attribute("gid"))==str(clv_gid_predio):
                                    print("entra")
                                    areaterreno = f.geometry().area()
                                    gid=f.attribute("fid")
                                    poliqg=f.geometry()
                                    geom=f.geometry().asWkt()
                                    
                                    print(str(areaterreno))
                            ####### ll #########################                                
                            ######### dialogo Rustico
                            
                            self.dialog = QtWidgets.QDialog()
                            ventanaRustico=self.dialog
                            ui = Ui_clv_CatR()
                            ui.setupUi(self.dialog,clv_catastral,clv_gestion)
                            ui.mLineEdit.setText(clv_catastral)
                            def CloseEvent(self):
                                
                                print('ventana cerrada X')
                                ventanaRustico.close()
                            self.dialog.closeEvent = CloseEvent
                            self.dialog.show()
                            
                                


                            ##########################

                            result = self.dialog.exec_()
                            # See if OK was pressed
                            if result:
                                datosGenclv=datosClv(ui)
                                print(datosGenclv)
                                nuevaClave=datosGenclv[0]

                                print("claves iguales",num_clvs_igiales)
                                if num_clvs_igiales==1 and nuevaClave!=clv_catastral:
                                    print(num_clvs_igiales)
                                    print(nuevaClave)

                                    iface.messageBar().pushMessage("Error", "Por lo menos un predio debe concervar la clave catastral original", level=Qgis.Success)
                                else:

                                    try:
                                        con = fnConexionServidorPg()
                                        print("gid",clv_gid_predio)
                                        cur = con.cursor()
                                        
                                        cur.execute("Update nogales_catastro.predio_gestion_"+clv_gestion+" SET catastral='"+nuevaClave+"',area_terre="+str(areaterreno)+", ban_cat=2, categoria='"+datosGenclv[1]+"' where gid="+clv_gid_predio)
                                        
                                        con.commit()
                                        #print ('Tabla creada')
                                        
                                        btnTramite.setEnabled(True)
                                    except psycopg2.DatabaseError as e:
                                        print(f'Error {e}')
                                    cur.close()
                                    fnConexionCerrarPg(con)
                                
                     
           

        layer = iface.activeLayer()
        canvas = iface.mapCanvas() 

        send_point_tool_coordinates = SendPointToolCoordinates(canvas,layer)
        
        canvas.setMapTool(send_point_tool_coordinates)   


    def finalizarTramite(self):
        try:
                global selTramite,usuario, clv_gestion 
                registry = QgsProject.instance()
                conP = fnConexionServidorPg()
                #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                curP = conP.cursor()
                curP.execute("select ban_cat from nogales_catastro.predio_gestion_"+clv_gestion+" where ban_cat=1 or ban_cat=0 ")
                if curP.fetchall():
                    print("faltan predios por guardar")
                    iface.messageBar().pushMessage("Error", "faltan predios por guardar", level=Qgis.Success)
                else:
                    curP.execute("select  catastral, count(catastral) from nogales_catastro.predio_gestion_"+clv_gestion+" group by catastral having count(catastral)>1 ")
                    if curP.fetchall():
                        print("Error Clave catastral repetida")
                        iface.messageBar().pushMessage("Error", "Clave catastral repetida", level=Qgis.Success)
                    else:
                        if selTramite=="SUBDIVISION RUSTICA" or selTramite=="FUSION RUSTICA" :
                            
                            layer = registry.mapLayersByName( 'predio_origen' )[0]
                            for feature in layer.getFeatures():
                                print(str(feature["categoria"]))
                                try:
                                    con = fnConexionServidor()
                                    cur = con.cursor()
                                    print(str(feature["categoria"]))
                                    #print("SELECT categoria,axovig,valor_unitario,tasa FROM c_valores_rusticos WHERE vigencia = 'V' and categoria='"+ str(feature["categoria"])+"'" )
                                    
                                    cur.execute("SELECT categoria,axovig,valor_unitario,tasa FROM c_valores_rusticos WHERE vigencia = 'V' and categoria='"+ str(feature["categoria"])+"'" )
                                    for categoria in cur.fetchall() :
                                        print(categoria[0])
                                        print(categoria)
                                        rustico_categoria = categoria[0]
                                        rustico_axovig = categoria[1]
                                        rustico_vu = categoria[2]
                                        rustico_tasa = categoria[3]
                                    print(rustico_tasa)
                                    print("insert into superficies_rusticas_proceso (superficie_rustica, categoria, valor_unitario, axovig, id_gestion, capturo, catastral) values ("+str(feature["area_terre"])+",'"+str(feature["categoria"])+"'," +str(rustico_vu)+","+str(rustico_axovig)+","+str(clv_gestion)+",'"+usuario+"','"+feature["catastral"]+"'")
                                    cur.execute("insert into superficies_rusticas_proceso (superficie_rustica, categoria, valor_unitario, axovig, id_gestion, capturo, catastral) values ("+str(feature["area_terre"])+",'"+str(feature["categoria"])+"'," +str(rustico_vu)+","+str(rustico_axovig)+","+str(clv_gestion)+",'"+usuario+"','"+feature["catastral"]+"')")
                                                        
                                    con.commit() 
                                    cur.close()
                                    fnConexionCerrar(con)   
                                except:
                                    print("Error cargar datos")
                            
                                


                        print("geometrias listas")
                        querylista="Update gestion set geometrias_listas = 'S', fecha_geometrias = getdate() where id_gestion = "+ str(clv_gestion)     
                        try:
                            con = fnConexionServidor()
                            cur = con.cursor() 
                            cur.execute(querylista)
                            con.commit()
                            cur.close()
                            fnConexionCerrar(con)
                            
                        except:
                            print("error update")
                        

                        #-------------------
                        layer = registry.mapLayersByName( 'predio_origen' )[0]
                        
                            
                        try:
                            #conpg = fnConexionServidorPg()
                            #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
                            #curpg = conpg.cursor()
                            for feature in layer.getFeatures():
                                print(str(feature["catastral"]))
                                clvPred=str(feature["catastral"])
                                curP.execute("DROP TABLE nogales_catastro.predio_vu_"+clv_gestion+"_"+clvPred)
                                
                            #conpg.commit()
                            #curpg.close()
                            #fnConexionCerrarPg(conpg)
                        except psycopg2.DatabaseError as e:
                                    print(f'Error {e}')
                                            
                         
                        #-----------------
                        
                        for layer in QgsProject.instance().mapLayers().values():
                                print(layer.name())
                                lyr_nombre=layer.name()
                                if 'origen' in lyr_nombre:
                                    print("origen",lyr_nombre)
                                    layer = registry.mapLayersByName( lyr_nombre )[0]
                                    QgsProject.instance().removeMapLayer(layer.id())
                                
                                if 'predio_calculos' in lyr_nombre:
                                    print("calculos",lyr_nombre)
                                    layer = registry.mapLayersByName( lyr_nombre )[0]
                                    QgsProject.instance().removeMapLayer(layer.id())
                        curP.execute("select nogales_catastro.borrar_tablas("+clv_gestion+")")


                        
                        self.actionbtnconstrucciones.setEnabled(False)
                        self.actionVunitario.setEnabled(False)
                        self.actionFinalizartramite.setEnabled(False)
                        self.actionFusion.setEnabled(False)  
                        self.actionGeneraclv.setEnabled(False)
                        self.iface.actionPan().trigger()
                        
                        

                
                        
                        
                    conP.commit()
                    curP.close()
                    fnConexionCerrarPg(conP)
                
        except psycopg2.DatabaseError as e:
                print(f'Error {e}')

    def fusion(self):
        #
        global ventanaFusion, clv_gestion
        if ventanaFusion is not None:
            ventanaFusion.close()

        

        self.dlg = fusionDialog()
        ventanaFusion=self.dlg

        # show the dialog
        def CloseEvent(self):
               ##self.first_start = True
               #Your desired functionality here
               print('ventana cerrada X')
                            

        self.dlg.closeEvent = CloseEvent
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            #self.first_start = True
            global usuario
        
            try:
                con = fnConexionServidorPg()
                cur = con.cursor()
                cur.execute("SELECT nogales_catastro.fusion("+clv_gestion+")")
                con.commit()
                
            except psycopg2.DatabaseError as e:
                    print(f'Error {e}')   

            self.actionbtnconstrucciones.setEnabled(True)
            self.actionVunitario.setEnabled(True)    
                
