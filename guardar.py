# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'guardar.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from qgis.PyQt.QtWidgets import *
from .funcBaseDatos import fnConexionServidor, fnConexionCerrar, fnConexionServidorPg, fnConexionCerrarPg, fnUri
from qgis.core import QgsRasterLayer, QgsProject,QgsDataSourceUri
from qgis.core import Qgis
from qgis.core import *
from qgis.PyQt.QtGui import QColor
from PyQt5.QtXml import QDomDocument
import psycopg2
import sys

tipo_Sector=""
clv_mzn=""
clv_gestion=""
clv_catastral=""
max_catastral=""
valorT = 0
terreno = 0
zonaH = ""
banda_max = 1
valorUG = 0
fsctorI = 0
banderaCortes = 0
valZb =0
zona=0

def valores(self):
    global tipo_Sector, clv_mzn, clv_gestion, clv_catastral, valorT, terreno, zona, banda_max,valorUG, fsctorI, valZb, zonaH
    return tipo_Sector, clv_mzn, clv_gestion, clv_catastral, valorT, terreno, zona, banda_max,valorUG, fsctorI, valZb, zonaH




def convert(in_data):
    def cvt(data):
        try:
            return ast.literal_eval(data)
        except Exception:
            return str(data)
    return tuple(map(cvt, in_data))

def datosPredios(self):
        con = None
        global clv_catastral
        clv_catastral = self.mLineEdit_3.text()
        print(clv_catastral)

        global clv_gestion
        clv_gestion= self.mLineEdit_2.text()
        try:
            con = fnConexionServidorPg()
            #con = psycopg2.connect(database='postgis_geo', user='postgres',password='taQ99Zm')
            cur = con.cursor()
            cur.execute("select b.clv_mzn  from nogales_catastro.predios a, nogales_catastro.manzanas b where st_intersects(b.geom, a.geom) = true and a.catastral='" + clv_catastral + "' ")
            
            for x in cur.fetchall():
                    global clv_mzn
                    print("convertir a texto")
                    print(x)
                    mzn=str(x)
                    clv_mzn=mzn[2:-3]
                    print(clv_mzn)
            
            
            
            if clv_mzn:
                self.mLineEdit.setText(clv_mzn)
            else:
                automzn = clv_catastral[5:-3]
                clv_mzn=automzn
                self.mLineEdit.setText(clv_mzn)
            
            con.commit()
            #print ('Tabla creada')
        except psycopg2.DatabaseError as e:
            print(f'Error {e}')
        cur.close()
        fnConexionCerrarPg(con)

        try:
            print("cATASTRAL = ",clv_catastral)
            con = fnConexionServidor()
            cur = con.cursor()
            cur.execute("select sector from catastro where catastral='" + clv_catastral + "' ")
           
            global tipo_Sector
            for x in cur.fetchall():
                    
                    print("convertir a texto")
                    print(x[2:-4])
                    sector=str(x)
                    tipo_Sector=sector[2:-4]
                    print(tipo_Sector)


            print(tipo_Sector)
            con.commit()    
        except:
             print("Error SECTOR")
        
        cur.close()
        fnConexionCerrar(con)



class Ui_Guardar(object):
    
    def setupUi(self, Dialog):
 
            
        #avaluoglobal clv_gestion
        def avaluoclick():
            global clv_catastral, banderaCortes, clv_gestion
            
            print("clickventana2")
            #borrar capa de calculos
            registry = QgsProject.instance()
            for layer in QgsProject.instance().mapLayers().values():
                print(layer.name())
                lyr_nombre=layer.name()
                if 'predio_calculos' in lyr_nombre:
                        print("calculos",lyr_nombre)
                        layer = registry.mapLayersByName( lyr_nombre )[0]
                        QgsProject.instance().removeMapLayer(layer.id())
                    




            ##
            print(clv_catastral)
            try:
                conC = fnConexionServidorPg()
                curC = conC.cursor()
                curC.execute("SELECT nogales_catastro.cortes("+clv_gestion+",'"+clv_catastral+"')")
                conC.commit()
                
            except psycopg2.DatabaseError as e:
                    print(f'Error {e}')
            curC.close()
            fnConexionCerrarPg(conC)
            self.pushButton_2.setEnabled(False)
            
            uri = fnUri()
            uri.setDataSource("nogales_catastro", "predio_vu_"+clv_gestion+"_"+clv_catastral+"", "geom")
            layer = QgsVectorLayer(uri.uri(), "predio_calculos", "postgres")
            #########3
            uri.setDataSource('public', 'layer_styles', None)
            styles = QgsVectorLayer(uri.uri(False), 'layer_styles', "postgres")
            styleqml = ""
            for style in styles.getFeatures():
                if style['stylename'] == 'predios_vu':
                    styleqml = style['styleqml']

            styledoc = QDomDocument()
            styledoc.setContent(styleqml)
            layer.importNamedStyle(styledoc)
            #######
            QgsProject.instance().addMapLayer(layer)
            
            # color geometria guardada predios
            

            #db = psycopg2.connect(database='postgis', port='5432', user='postgres',password='n0g@p0stg35')
            try:
                con = fnConexionServidorPg()
                cur = con.cursor()
                # tabla         
                rows = cur.execute("SELECT zona_h, valor_zona, valor_band, area FROM nogales_catastro.predio_vu_"+clv_gestion+"_"+clv_catastral+" ")
                data = cur.fetchall()
                global valorT, terreno, banda_max, zona,  valorUG, fsctorI, valZb, zonaH
              
                valoresZb = []
              
                print ('No Gestion y Catastral: ' + clv_gestion + '_' + clv_catastral)


                for row in data:
                    zonaH=row[0]
                    if row[1]:
                        zona=row[1]
                        print("if valor zona: ",zona)
                    else:
                        zona=0
                        print("else no hay zona: ",zona)
                    if row[2]:
                        banda=row[2]
                        print("if valor banda: ",banda)
                        print(row[2])
                        if banda_max < row[2]:
                            banda_max = row[2]
                    else:
                        banda=0  
                        print("else banda 0 o no hay banda",banda) 
                  
                  

                    if zona < banda :
                        valoresZb.append(row[2])
                        valorT+= banda*row[3]
                    else:
                        valoresZb.append(row[1])
                        valorT+= zona*row[3]
                    terreno+=row[3] 
                    print(max(valoresZb))
                    print(valorT)
                
                    add_table(convert(row))
                valZb=max(valoresZb)  
                valorUG=valorT/terreno
              
                fsctorI=valorUG/max(valoresZb)
                valorUG=round(valorUG,2)
                fsctorI=round(fsctorI,1)

                print("valor Unitario *: ",valorUG)
                self.mLineEdit_4.setText(str(valorUG))
                print("Factor irregularidad",fsctorI)
                self.mLineEdit_5.setText(str(fsctorI))
              
            except psycopg2.DatabaseError as e:
                    print(f'Error {e}')
            cur.close()
            fnConexionCerrarPg(con)


        def add_table(columns):
            rowPosition = self.tableWidget.rowCount()
            self.tableWidget.insertRow(rowPosition)         #insert new row
            for i, column in enumerate(columns):
               self.tableWidget.setItem(rowPosition, i, QtWidgets.QTableWidgetItem(str(column)))
        







        Dialog.setObjectName("Dialog")
        Dialog.resize(354, 360)
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(110, 320, 211, 21))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        #tabla
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(20, 150, 321, 91))
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setHorizontalHeaderLabels(['Zona', 'VZona','Vbanda','Area'])
        self.tableWidget.setObjectName("tableWidget")
        
        #
        #self.tableView = QtWidgets.QTableView(Dialog)
        #self.tableView.setEnabled(True)
        #self.tableView.setGeometry(QtCore.QRect(20, 150, 321, 91))
        #self.tableView.setObjectName("tableView")
        #
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(20, 20, 81, 16))
        self.label.setObjectName("label")
        self.mLineEdit = QgsFilterLineEdit(Dialog)
        self.mLineEdit.setGeometry(QtCore.QRect(20, 40, 81, 21))
        self.mLineEdit.setProperty("qgisRelation", "")
        self.mLineEdit.setObjectName("mLineEdit")
        self.mLineEdit.setAcceptDrops(False)
        self.mLineEdit.setReadOnly(True)
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(190, 20, 81, 16))
        self.label_2.setObjectName("label_2")
        self.mLineEdit_2 = QgsFilterLineEdit(Dialog)
        self.mLineEdit_2.setGeometry(QtCore.QRect(170, 40, 121, 21))
        self.mLineEdit_2.setProperty("qgisRelation", "")
        self.mLineEdit_2.setObjectName("mLineEdit_2")
        self.mLineEdit_2.setAcceptDrops(False)
        self.mLineEdit_2.setReadOnly(True)
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(20, 80, 81, 16))
        self.label_3.setObjectName("label_3")
        self.mLineEdit_3 = QgsFilterLineEdit(Dialog)
        self.mLineEdit_3.setEnabled(True)
        self.mLineEdit_3.setGeometry(QtCore.QRect(20, 100, 111, 21))
        self.mLineEdit_3.setText("")
        self.mLineEdit_3.setReadOnly(True)
        self.mLineEdit_3.setProperty("qgisRelation", "")
        self.mLineEdit_3.setObjectName("mLineEdit_3")
        self.mLineEdit_3.setAcceptDrops(False)
        self.mLineEdit_3.setReadOnly(True)
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(150, 100, 131, 21))
        self.pushButton_2.setObjectName("pushButton_2")
        
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(20, 250, 111, 16))
        self.label_4.setObjectName("label_4")
        self.mLineEdit_4 = QgsFilterLineEdit(Dialog)
        self.mLineEdit_4.setEnabled(True)
        self.mLineEdit_4.setGeometry(QtCore.QRect(20, 270, 111, 21))
        self.mLineEdit_4.setText("")
        self.mLineEdit_4.setReadOnly(True)
        self.mLineEdit_4.setProperty("qgisRelation", "")
        self.mLineEdit_4.setObjectName("mLineEdit_4")
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(160, 250, 121, 16))
        self.label_5.setObjectName("label_5")
        self.mLineEdit_5 = QgsFilterLineEdit(Dialog)
        self.mLineEdit_5.setEnabled(True)
        self.mLineEdit_5.setGeometry(QtCore.QRect(160, 270, 111, 21))
        self.mLineEdit_5.setText("")
        self.mLineEdit_5.setReadOnly(True)
        self.mLineEdit_5.setAcceptDrops(False)
        self.mLineEdit_5.setProperty("qgisRelation", "")
        self.mLineEdit_5.setObjectName("mLineEdit_5")
        self.checkBox = QtWidgets.QCheckBox(Dialog)
        self.checkBox.setGeometry(QtCore.QRect(30, 320, 81, 17))
        self.checkBox.setObjectName("checkBox")
        self.checkBox.stateChanged.connect(self.checkstate)
        



        self.retranslateUi(Dialog)
        
        self.buttonBox.accepted.connect(Dialog.accept)
        self.buttonBox.rejected.connect(Dialog.reject)
        self.pushButton_2.clicked.connect(avaluoclick)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        

    
    
    
    
    
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Calcular Valor Unitario"))
        self.label.setText(_translate("Dialog", "Clave Manzana"))
        self.label_2.setText(_translate("Dialog", "Id Gestión"))
        self.label_3.setText(_translate("Dialog", "Clave Catastral"))
        self.pushButton_2.setText(_translate("Dialog", "Calcular Valor Unitario"))
        self.label_4.setText(_translate("Dialog", "Valor Unitario General"))
        self.label_5.setText(_translate("Dialog", "Factor de Irregularidad"))
        self.checkBox.setText(_translate("Dialog", "condominio"))

    def checkstate(self,state):

        if self.checkBox.isChecked():
            print("true")

from qgsfilterlineedit import QgsFilterLineEdit


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Guardar()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
